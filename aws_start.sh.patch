--- startup/aws_start.sh	2024-06-06 17:39:40.000000000 -0700
+++ startup/aws_start.sh	2024-06-10 10:25:02.256780186 -0700
@@ -87,7 +87,7 @@
   EC2_TYPE=t2.xlarge
   REGION=us-west-2
 else
-  AMI_IMAGE=ami-04bad3c587fe60d89
+  AMI_IMAGE=ami-03c983f9003cb9cd1  # 22.04  20.04:ami-04bad3c587fe60d89 24.04:ami-0406d1fdd021121cd
   EC2_TYPE=t2.small
   REGION=us-west-2
 fi
@@ -106,8 +106,8 @@
   while true
   do
     prompt AMI_IMAGE "Cloud AMI image, press ENTER to accept default ${AMI_IMAGE}: "
-    prompt EC2_TYPE "Cloud EC2 type, press ENTER to accept default ${EC2_TYPE}: "
-    prompt REGIION "Cloud EC2 region, press ENTER to accept default ${REGION}: "
+    prompt EC2_TYPE "Cloud EC2 type, use g4dn.xlarge for GPU or press ENTER to accept default ${EC2_TYPE}: "
+    prompt REGION "Cloud EC2 region, press ENTER to accept default ${REGION}: "
     prompt ans "region = ${REGION}, ami image = ${AMI_IMAGE}, EC2 type = ${EC2_TYPE}, OK? (Y/n) "
     if [[ $ans = "" ]] || [[ $ans =~ ^(y|Y)$ ]]
     then
@@ -146,9 +146,9 @@
 
 echo "Generating key pair for VM"
 
-aws ec2 delete-key-pair --key-name $KEY_PAIR > /dev/null 2>&1
+aws ec2 delete-key-pair --region $REGION --key-name $KEY_PAIR > /dev/null 2>&1
 rm -rf $KEY_FILE
-aws ec2 create-key-pair --key-name $KEY_PAIR --query 'KeyMaterial' --output text > $KEY_FILE
+aws ec2 create-key-pair --region $REGION --key-name $KEY_PAIR --query 'KeyMaterial' --output text > $KEY_FILE
 report_status "$?" "creating key pair"
 chmod 400 $KEY_FILE
 
@@ -156,18 +156,18 @@
 # Try not reusing existing security group because we have to modify it for our own need.
 if [ $using_default_vpc == true ]
 then
-  sg_id=$(aws ec2 create-security-group --group-name $SECURITY_GROUP --description "NVFlare security group" | jq -r .GroupId)
+  sg_id=$(aws ec2 create-security-group --region $REGION --group-name $SECURITY_GROUP --description "NVFlare security group" | jq -r .GroupId)
 else
-  sg_id=$(aws ec2 create-security-group --group-name $SECURITY_GROUP --description "NVFlare security group" --vpc-id $vpc_id | jq -r .GroupId)
+  sg_id=$(aws ec2 create-security-group --region $REGION --group-name $SECURITY_GROUP --description "NVFlare security group" --vpc-id $vpc_id | jq -r .GroupId)
 fi
 report_status "$?" "creating security group"
 my_public_ip=$(dig +short myip.opendns.com @resolver1.opendns.com)
 if [ "$?" -eq 0 ] && [[ "$my_public_ip" =~ ^(([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))\.){3}([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))$ ]]
 then
-  aws ec2 authorize-security-group-ingress --group-id $sg_id --protocol tcp --port 22 --cidr ${my_public_ip}/32 > /tmp/sec_grp.log
+  aws ec2 authorize-security-group-ingress --region $REGION --group-id $sg_id --protocol tcp --port 22 --cidr ${my_public_ip}/32 > /tmp/sec_grp.log
 else
   echo "getting my public IP failed, please manually configure the inbound rule to limit SSH access"
-  aws ec2 authorize-security-group-ingress --group-id $sg_id --protocol tcp --port 22 --cidr 0.0.0.0/0 > /tmp/sec_grp.log
+  aws ec2 authorize-security-group-ingress --region $REGION --group-id $sg_id --protocol tcp --port 22 --cidr 0.0.0.0/0 > /tmp/sec_grp.log
 fi
 report_status "$?" "creating security group rules"
 
@@ -175,17 +175,25 @@
 
 echo "Creating VM at region $REGION, may take a few minutes."
 
+ ami_info=$(aws ec2 describe-images --region $REGION --image-ids $AMI_IMAGE --output json)
+ amidevice=$(echo $ami_info | jq -r '.Images[0].BlockDeviceMappings[0].DeviceName')
+ block_device_mappings=$(echo $ami_info | jq -r '.Images[0].BlockDeviceMappings')
+ original_size=$(echo $block_device_mappings | jq -r '.[0].Ebs.VolumeSize')
+ original_volume_type=$(echo $block_device_mappings | jq -r '.[0].Ebs.VolumeType')
+ new_size=$((original_size + 8))
+ bdmap='[{"DeviceName":"'${amidevice}'","Ebs":{"VolumeSize":'${new_size}',"VolumeType":"'${original_volume_type}'","DeleteOnTermination":true}}]'
+
 if [ $using_default_vpc == true ]
 then
-  aws ec2 run-instances --region $REGION --image-id $AMI_IMAGE --count 1 --instance-type $EC2_TYPE --key-name $KEY_PAIR --security-group-ids $sg_id > vm_create.json
+  aws ec2 run-instances --region $REGION --image-id $AMI_IMAGE --count 1 --instance-type $EC2_TYPE --key-name $KEY_PAIR --security-group-ids $sg_id --block-device-mappings $bdmap > vm_create.json
 else
-  aws ec2 run-instances --region $REGION --image-id $AMI_IMAGE --count 1 --instance-type $EC2_TYPE --key-name $KEY_PAIR --security-group-ids $sg_id --subnet-id $subnet_id > vm_create.json
+  aws ec2 run-instances --region $REGION --image-id $AMI_IMAGE --count 1 --instance-type $EC2_TYPE --key-name $KEY_PAIR --security-group-ids $sg_id --block-device-mappings $bdmap --subnet-id $subnet_id > vm_create.json
 fi
 report_status "$?" "creating VM"
 instance_id=$(jq -r .Instances[0].InstanceId vm_create.json)
 
-aws ec2 wait instance-status-ok --instance-ids $instance_id
-aws ec2 describe-instances --instance-ids $instance_id > vm_result.json
+aws ec2 wait instance-status-ok --region $REGION --instance-ids $instance_id
+aws ec2 describe-instances --region $REGION --instance-ids $instance_id > vm_result.json
 
 IP_ADDRESS=$(jq -r .Reservations[0].Instances[0].PublicIpAddress vm_result.json)
 
@@ -209,10 +217,16 @@
 else
   echo "Installing packages in $VM_NAME, may take a few minutes."
   ssh -f -i $KEY_FILE -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${DEST_SITE} \
-  "pwd && wget -q https://bootstrap.pypa.io/get-pip.py && \
-  python3 get-pip.py && python3 -m pip install nvflare && \
+  " sudo apt update && \
+  if lspci | grep -i nvidia; then sudo DEBIAN_FRONTEND=noninteractive apt install -y nvidia-driver-535-server; fi && \
+  if lspci | grep -i nvidia; then sudo modprobe nvidia; fi && \
+  echo 'export PATH=~/.local/bin:\$PATH' >> ~/.bashrc && \
+  export PATH=/home/ubuntu/.local/bin:\$PATH && \
+  pwd && wget -q https://bootstrap.pypa.io/get-pip.py && \
+  python3 get-pip.py --break-system-packages && python3 -m pip install --break-system-packages nvflare && \
   touch ${DEST_FOLDER}/startup/requirements.txt && \
-  python3 -m pip install -r ${DEST_FOLDER}/startup/requirements.txt && \
+  python3 -m pip install --break-system-packages --no-cache-dir -r ${DEST_FOLDER}/startup/requirements.txt && \
+  (crontab -l 2>/dev/null; echo '@reboot  /var/tmp/cloud/startup/start.sh >> /var/tmp/nvflare-client-start.log 2>&1') | crontab && \
   nohup ${DEST_FOLDER}/startup/start.sh && sleep 20 && \
   exit" > /tmp/nvflare.log 2>&1 
 
@@ -225,3 +239,5 @@
 echo "Other resources provisioned"
 echo "security group: ${SECURITY_GROUP}"
 echo "key pair: ${KEY_PAIR}"
+echo "login: ssh -i ${KEY_PAIR}.pem ubuntu@${IP_ADDRESS}"

